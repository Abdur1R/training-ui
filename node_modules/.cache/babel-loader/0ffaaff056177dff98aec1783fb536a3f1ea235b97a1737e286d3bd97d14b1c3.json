{"ast":null,"code":"var _jsxFileName = \"/home/abdurrahman/Projects/training-ui/src/ChatAPI/ChatAPI.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './ChatAPI.scss';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\nconst ChatAPI = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSendRequest = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setIsTyping(true);\n    try {\n      var _response$choices$, _response$choices$$me;\n      const response = await processMessageToChatGPT([...messages, newMessage]);\n      const content = (_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 ? void 0 : (_response$choices$$me = _response$choices$.message) === null || _response$choices$$me === void 0 ? void 0 : _response$choices$$me.content;\n      if (content) {\n        const chatGPTResponse = {\n          message: content,\n          sender: \"ChatGPT\"\n        };\n        setMessages(prevMessages => [...prevMessages, chatGPTResponse]);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    const apiMessages = chatMessages.map(messageObject => {\n      const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return {\n        role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [{\n        role: \"system\",\n        content: \"I'm a Student using ChatGPT for learning\"\n      }, ...apiMessages]\n    };\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    });\n    return response.json();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"800px\",\n        width: \"700px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 57\n            }, this) : null,\n            children: messages.map((message, i) => {\n              console.log(message);\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Send a Message\",\n            onSend: handleSendRequest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatAPI, \"kSmIBpGXLlCMpdKWWnN61owjk4o=\");\n_c = ChatAPI;\nexport default ChatAPI;\nvar _c;\n$RefreshReg$(_c, \"ChatAPI\");","map":{"version":3,"names":["useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","API_KEY","ChatAPI","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSendRequest","newMessage","direction","prevMessages","response","processMessageToChatGPT","content","choices","chatGPTResponse","error","console","chatMessages","apiMessages","map","messageObject","role","apiRequestBody","fetch","method","headers","body","JSON","stringify","json","position","height","width","i","log"],"sources":["/home/abdurrahman/Projects/training-ui/src/ChatAPI/ChatAPI.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './ChatAPI.scss';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport {\n    MainContainer,\n    ChatContainer,\n    MessageList,\n    Message,\n    MessageInput,\n    TypingIndicator,\n} from '@chatscope/chat-ui-kit-react';\n\nconst API_KEY = \"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\";\n\nconst ChatAPI = () => {\n    const [messages, setMessages] = useState([\n        {\n            message: \"Hello, I'm ChatGPT! Ask me anything!\",\n            sentTime: \"just now\",\n            sender: \"ChatGPT\",\n        },\n    ]);\n    const [isTyping, setIsTyping] = useState(false);\n\n    const handleSendRequest = async (message: any) => {\n        const newMessage = {\n            message,\n            direction: 'outgoing',\n            sender: \"user\",\n        };\n\n        setMessages((prevMessages: any) => [...prevMessages, newMessage]);\n        setIsTyping(true);\n\n        try {\n            const response = await processMessageToChatGPT([...messages, newMessage]);\n            const content = response.choices[0]?.message?.content;\n            if (content) {\n                const chatGPTResponse = {\n                    message: content,\n                    sender: \"ChatGPT\",\n                };\n                setMessages((prevMessages: any) => [...prevMessages, chatGPTResponse]);\n            }\n        } catch (error) {\n            console.error(\"Error processing message:\", error);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    async function processMessageToChatGPT(chatMessages: any[]) {\n        const apiMessages = chatMessages.map((messageObject: { sender: string; message: any; }) => {\n            const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n            return { role, content: messageObject.message };\n        });\n\n        const apiRequestBody = {\n            \"model\": \"gpt-3.5-turbo\",\n            \"messages\": [\n                { role: \"system\", content: \"I'm a Student using ChatGPT for learning\" },\n                ...apiMessages,\n            ],\n        };\n\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \" + API_KEY,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(apiRequestBody),\n        });\n\n        return response.json();\n    }\n\n    return (\n        <div className=\"App\">\n            <div style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\n                <MainContainer>\n                    <ChatContainer>\n                        <MessageList\n                            scrollBehavior=\"smooth\"\n                            typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n                        >\n                            {messages.map((message: any, i) => {\n                                console.log(message)\n                                return <Message key={i} model={message} />\n                            })}\n                        </MessageList>\n                        <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />\n                    </ChatContainer>\n                </MainContainer>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatAPI;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
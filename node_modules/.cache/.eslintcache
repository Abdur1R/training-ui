[{"/home/abdurrahman/Projects/training-ui/src/index.js":"1","/home/abdurrahman/Projects/training-ui/src/reportWebVitals.js":"2","/home/abdurrahman/Projects/training-ui/src/App.tsx":"3","/home/abdurrahman/Projects/training-ui/src/AllRoutes.tsx":"4","/home/abdurrahman/Projects/training-ui/src/SignIn/SignIn.tsx":"5","/home/abdurrahman/Projects/training-ui/src/SignUp/SignUp.tsx":"6","/home/abdurrahman/Projects/training-ui/src/ToDoList/ToDoList.tsx":"7","/home/abdurrahman/Projects/training-ui/src/ToDoList/Task.tsx":"8","/home/abdurrahman/Projects/training-ui/src/ToDoList/AddTask.tsx":"9","/home/abdurrahman/Projects/training-ui/src/LandingPage/LandingPage.tsx":"10","/home/abdurrahman/Projects/training-ui/src/AppLayout.tsx":"11","/home/abdurrahman/Projects/training-ui/src/Card/Card.tsx":"12","/home/abdurrahman/Projects/training-ui/src/ChatAPI/ChatAPI.tsx":"13","/home/abdurrahman/Projects/training-ui/src/Heart/Heart.tsx":"14"},{"size":539,"mtime":1696687542095,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1696687095922,"results":"17","hashOfConfig":"16"},{"size":782,"mtime":1701437474159,"results":"18","hashOfConfig":"16"},{"size":715,"mtime":1702728624385,"results":"19","hashOfConfig":"16"},{"size":117,"mtime":1696689105626,"results":"20","hashOfConfig":"16"},{"size":1313,"mtime":1696870792747,"results":"21","hashOfConfig":"16"},{"size":3903,"mtime":1697462355868,"results":"22","hashOfConfig":"16"},{"size":671,"mtime":1697462476996,"results":"23","hashOfConfig":"16"},{"size":1008,"mtime":1697456189634,"results":"24","hashOfConfig":"16"},{"size":913,"mtime":1699207997500,"results":"25","hashOfConfig":"16"},{"size":246,"mtime":1699207951418,"results":"26","hashOfConfig":"16"},{"size":170,"mtime":1699208479728,"results":"27","hashOfConfig":"16"},{"size":3372,"mtime":1701437982051,"results":"28","hashOfConfig":"16"},{"size":137,"mtime":1702729722776,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"5grx8",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/abdurrahman/Projects/training-ui/src/index.js",[],[],[],"/home/abdurrahman/Projects/training-ui/src/reportWebVitals.js",[],[],"/home/abdurrahman/Projects/training-ui/src/App.tsx",["77"],[],"import React, { ReactElement } from \"react\";\nimport AllRoutes from './AllRoutes.tsx';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./global.scss\";\nimport AppLayout from \"./AppLayout.tsx\";\n\nconst App = () => (\n    <div className=\"App\">\n        <AppLayout>\n            <BrowserRouter>\n                <Routes>\n                    {\n                        AllRoutes.map((item: any, index: number) => (\n                            <Route\n                                path={item.path}\n                                Component={item.component}\n                            />\n                        ))\n                    }\n                </Routes>\n            </BrowserRouter>\n        </AppLayout>\n    </div>\n);\n\nexport default App;\n","/home/abdurrahman/Projects/training-ui/src/AllRoutes.tsx",[],[],"/home/abdurrahman/Projects/training-ui/src/SignIn/SignIn.tsx",[],[],[],"/home/abdurrahman/Projects/training-ui/src/SignUp/SignUp.tsx",[],[],"/home/abdurrahman/Projects/training-ui/src/ToDoList/ToDoList.tsx",["78"],[],"import React, { useState } from 'react';\nimport Task from './Task';\nimport AddTask from './AddTask';\nimport { Tabs } from \"antd\";\nimport \"./ToDoList.scss\";\n\nconst { TabPane } = Tabs;\n\nconst TodoList = () => {\n    console.log(\"In To Do LiST\");\n    const [state, setState] = useState({\n        tasks: [\n            { id: 1, task: 'Buy groceries', completed: false },\n            { id: 2, task: 'Go for a walk', completed: false }\n        ],\n        filter: 'all',\n    });\n\n    const handleAddTask = (task: any) => {\n        const tasks = [...state.tasks];\n        tasks.push({ id: tasks.length + 1, task, completed: false });\n        setState({ ...state, tasks });\n    };\n\n    const handleDeleteTask = (taskName: any) => {\n        const tasks = [...state.tasks];\n        const index = tasks.findIndex(task => task.task === taskName);\n        tasks.splice(index, 1);\n        setState({ ...state, tasks });\n    };\n\n    const handleFilterChange = (filter: any) => {\n        setState({ ...state, tasks });\n    };\n\n    const getFilteredTasks = (key: string) => {\n        const { tasks } = state;\n\n        switch (key) {\n            case 'completed':\n                return tasks.filter((task: any) => task.completed);\n            case 'incomplete':\n                return tasks.filter((task: any) => !task.completed);\n            case 'all':\n            default:\n                return tasks;\n        }\n    };\n\n    const handleToggleCompleted = (taskName: any) => {\n        const { tasks }: any = state;\n        // const index = tasks.findIndex((task: any) => task.task === taskName);\n        const updatedTasks = tasks.map((task: any) => {\n            if (task.task === taskName) {\n                return { ...task, completed: true };\n            }\n            return task;\n        });\n        setState({ ...state, tasks: updatedTasks });\n    };\n\n    const { tasks, filter } = state;\n    // const filteredTasks = getFilteredTasks();\n    console.log(\"Tasks\", tasks);\n\n    return (\n        <div className='to-do-list'>\n            <h1>To-Do List</h1>\n            <AddTask onAddTask={handleAddTask} />\n            <div className='card'>\n                <Tabs onChange={handleFilterChange}>\n                    <TabPane tab=\"All\" key=\"all\">\n                        {getFilteredTasks('all').map((task: any, index: number) => (\n                            <Task id={index + 1} task={task} onToggleCompleted={handleToggleCompleted} onDeleteTask={handleDeleteTask} />\n                        )\n                        )}\n                    </TabPane>\n                    <TabPane tab=\"Completed\" key=\"completed\">\n                        {getFilteredTasks('completed').map((task: any, index: number) => (\n                            <Task id={index + 1} task={task} onToggleCompleted={handleToggleCompleted} onDeleteTask={handleDeleteTask} />\n                        )\n                        )}\n                    </TabPane>\n                    <TabPane tab=\"In-Complete\" key=\"incomplete\">\n                        {getFilteredTasks('incomplete').map((task: any, index: number) => (\n                            <Task id={index + 1} task={task} onToggleCompleted={handleToggleCompleted} onDeleteTask={handleDeleteTask} />\n                        )\n                        )}\n                    </TabPane>\n                </Tabs>\n            </div>\n            {/* <div>\n                <button onClick={() => handleFilterChange('all')} disabled={filter === 'all'}>\n                    All\n                </button>\n                <button onClick={() => handleFilterChange('completed')} disabled={filter === 'completed'}>\n                    Completed\n                </button>\n                <button onClick={() => handleFilterChange('incomplete')} disabled={filter === 'incomplete'}>\n                    Incomplete\n                </button>\n            </div> */}\n        </div>\n    );\n}\n\nexport default TodoList;","/home/abdurrahman/Projects/training-ui/src/ToDoList/Task.tsx",[],[],"/home/abdurrahman/Projects/training-ui/src/ToDoList/AddTask.tsx",[],[],"/home/abdurrahman/Projects/training-ui/src/LandingPage/LandingPage.tsx",[],[],"/home/abdurrahman/Projects/training-ui/src/AppLayout.tsx",[],[],"/home/abdurrahman/Projects/training-ui/src/Card/Card.tsx",[],[],"/home/abdurrahman/Projects/training-ui/src/ChatAPI/ChatAPI.tsx",["79"],[],"import { useState, useEffect } from 'react';\nimport './ChatAPI.scss';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport {\n    MainContainer,\n    ChatContainer,\n    MessageList,\n    Message,\n    MessageInput,\n    TypingIndicator,\n} from '@chatscope/chat-ui-kit-react';\n\nconst API_KEY = \"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\";\n\nconst ChatAPI = () => {\n    const [messages, setMessages] = useState([\n        {\n            message: \"Hello, I'm ChatGPT! Ask me anything!\",\n            sentTime: \"just now\",\n            sender: \"ChatGPT\",\n        },\n    ]);\n    const [isTyping, setIsTyping] = useState(false);\n\n    const handleSendRequest = async (message: any) => {\n        const newMessage = {\n            message,\n            direction: 'outgoing',\n            sender: \"user\",\n        };\n\n        setMessages((prevMessages: any) => [...prevMessages, newMessage]);\n        setIsTyping(true);\n\n        try {\n            const response = await processMessageToChatGPT([...messages, newMessage]);\n            const content = response.choices[0]?.message?.content;\n            if (content) {\n                const chatGPTResponse = {\n                    message: content,\n                    sender: \"ChatGPT\",\n                };\n                setMessages((prevMessages: any) => [...prevMessages, chatGPTResponse]);\n            }\n        } catch (error) {\n            console.error(\"Error processing message:\", error);\n        } finally {\n            setIsTyping(false);\n        }\n    };\n\n    async function processMessageToChatGPT(chatMessages: any[]) {\n        const apiMessages = chatMessages.map((messageObject: { sender: string; message: any; }) => {\n            const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n            return { role, content: messageObject.message };\n        });\n\n        const apiRequestBody = {\n            \"model\": \"gpt-3.5-turbo\",\n            \"messages\": [\n                { role: \"system\", content: \"I'm a Student using ChatGPT for learning\" },\n                ...apiMessages,\n            ],\n        };\n\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \" + API_KEY,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(apiRequestBody),\n        });\n\n        return response.json();\n    }\n\n    return (\n        <div className=\"App\">\n            <div style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\n                <MainContainer>\n                    <ChatContainer>\n                        <MessageList\n                            scrollBehavior=\"smooth\"\n                            typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n                        >\n                            {messages.map((message: any, i) => {\n                                console.log(message)\n                                return <Message key={i} model={message} />\n                            })}\n                        </MessageList>\n                        <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />\n                    </ChatContainer>\n                </MainContainer>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatAPI;","/home/abdurrahman/Projects/training-ui/src/Heart/Heart.tsx",[],[],{"ruleId":"80","severity":1,"message":"81","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":29},{"ruleId":"80","severity":1,"message":"84","line":62,"column":20,"nodeType":"82","messageId":"83","endLine":62,"endColumn":26},{"ruleId":"80","severity":1,"message":"85","line":1,"column":20,"nodeType":"82","messageId":"83","endLine":1,"endColumn":29},"@typescript-eslint/no-unused-vars","'ReactElement' is defined but never used.","Identifier","unusedVar","'filter' is assigned a value but never used.","'useEffect' is defined but never used."]